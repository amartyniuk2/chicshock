# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AllUsersResponse {
  message: String!
  users: [User!]!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Categories {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  isActive: Boolean!
  name: String!
  posts: [Posts!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
}

type CheckIfFollowExistsResponse {
  follow: Followers!
  isFollowExistant: Boolean!
}

type CheckIfFriendExistsResponse {
  friendship: Friends!
  isFriended: Boolean!
}

input CreateCategoryInput {
  name: String!
}

input CreatePostsInput {
  brand: String
  categoryId: String
  description: String
  expiryDate: DateTime
  isPrivate: Boolean
  location: String
  photos: [String!]!
  postType: String
  subCategories: [String!] = []
  title: String!
}

input CreateReportInput {
  postId: String!
  reason: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FetchVotesOnPostResponse {
  message: String
  voteStats: VoteStats
  votes: [Votes!]
}

type FollowUnFollowResponse {
  message: String!
}

type Followers {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  follower: User
  followerId: String
  id: ID

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
}

type Friends {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  friend: User
  friendId: String
  friendshipStatus: friendshipStatus!
  id: ID

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
}

input FriendshipInput {
  friendshipStatus: String!
}

type FriendshipReturn {
  friendship: Friends
  message: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String
  password: String!
  username: String
}

type Mutation {
  addFriend(friendId: String!): FriendshipReturn!
  createCategory(data: CreateCategoryInput!): Categories!
  createPost(data: CreatePostsInput!): Posts!
  createReport(data: CreateReportInput!): Reports!
  deleteCategory(categoryId: String!): Categories!
  deletePost(postId: String!): Posts!
  followUser(userId: String!): FollowUnFollowResponse!
  login(data: LoginInput!): Auth!
  refreshToken(token: String!): Token!
  removeFriend(friendId: String!): FriendshipReturn!

  """method for admins only"""
  removeReportedPost(data: RemoveReportedPostInput!): Posts!
  signup(data: SignupInput!): Auth!
  subscribeToUserNotifications(data: U2UPushNotInput!, publisherUserId: String!): UserToUserCUNotResponse!
  unFollowUser(userId: String!): FollowUnFollowResponse!
  unVotePost(postId: String!): VotesResponse!
  updateCategory(data: UpdateCategoryInput!): Categories!
  updateFriendRequest(data: FriendshipInput!, friendshipId: String!): FriendshipReturn!
  updateNotificationSettings(data: NotificationSettingsInput!): NotifSettingsResp!
  updatePost(data: UpdatePostsInput!): Posts!
  updateUser(data: UpdateUserInput!): UpdateUserReturn!
  updatesUser2UserNotifOpts(data: U2UPushNotUpdateInput!, notificationId: String!): UserToUserCUNotResponse!
  votePost(data: VoteInput!): VotesResponse!
}

type NotifSettingsResp {
  message: String
  notificationSettings: NotificationSettingsResp
}

input NotificationSettingsInput {
  followNotificationsOn: Boolean
  friendRequestsNotificationsOn: Boolean
  pauseNotifications: Boolean
  votingExpiredNotificationsOn: Boolean
}

type NotificationSettingsP {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  followNotificationsOn: Boolean
  friendRequestsNotificationsOn: Boolean
  id: ID
  pauseNotifications: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
  votingExpiredNotificationsOn: Boolean
}

type NotificationSettingsResp {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  followNotificationsOn: Boolean
  friendRequestsNotificationsOn: Boolean
  id: ID
  pauseNotifications: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
  votingExpiredNotificationsOn: Boolean
}

type Notifications {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  description: String
  id: ID
  notificationType: notificationType
  post: Posts
  postId: String!
  sender: User
  senderId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
}

type NotificationsP {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  description: String
  id: ID
  notificationType: notificationType
  post: Posts
  postId: String!
  sender: User
  senderId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
}

input Pagination {
  skip: Int
  take: Int
}

type Posts {
  brand: String
  category: Categories

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  expiryDate: DateTime
  id: ID
  isArchived: Boolean
  isDeleted: Boolean
  isPrivate: Boolean
  location: String
  photos: [String!]!
  postType: postType
  subCategories: [String!]!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
  voteStats: VoteStats
  votes: [Votes!]
}

type Query {
  appConfig: String!
  checkIfFollowAlreadyExists(userId: String!): CheckIfFollowExistsResponse!
  checkIfFriendAlreadyAdded(userId: String!): CheckIfFriendExistsResponse!
  checkIfVoteAlreadyExists(postId: String!): VotesResponse!
  fetchAllUsers(pagination: Pagination = {}): AllUsersResponse!
  fetchCategories: [Categories!]!
  fetchCategory(categoryId: String!): Categories!
  fetchPostById(postId: String!): Posts!
  fetchPostsByUserId(pagination: Pagination = {}, userId: String!): [Posts!]!
  fetchPresignedURL(filename: String!): SignedURLResponse!
  fetchProfile(userId: String!): UpdateUserReturn!
  fetchPushNotificationPublishers: [UserToUserPushNotifications!]!
  fetchPushNotificationSubscribers: [UserToUserPushNotifications!]!
  fetchUserNotifications: [Notifications!]!
  fetchUserPosts(pagination: Pagination = {}): [Posts!]!
  fetchVotesOnPost(pagination: Pagination = {}, postId: String!): FetchVotesOnPostResponse!
  fetchWall(pagination: Pagination = {}): [Posts!]!
  me: UpdateUserReturn!
}

input RemoveReportedPostInput {
  postId: String!
}

type Reports {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID
  post: Posts
  postId: String!
  reason: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String!
}

type SignedURLResponse {
  durationToExpire: Int!
  url: String!
}

input SignupInput {
  email: String
  expoPushToken: String
  firstName: String
  lastName: String
  password: String
  platformId: String
  platformToken: String
  signupType: String
  username: String
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input U2UPushNotInput {
  postNotificationsOn: Boolean
  publisherUserId: String!
  subscriberUserId: String!
}

input U2UPushNotUpdateInput {
  postNotificationsOn: Boolean
}

input UpdateCategoryInput {
  id: String!
  isActive: Boolean
  name: String
}

input UpdatePostsInput {
  brand: String
  categoryId: String
  description: String
  expiryDate: DateTime
  id: String!
  isArchived: Boolean
  isPrivate: Boolean
  location: String
  photos: [String!]
  postType: String
  subCategories: [String!]
  title: String
}

input UpdateUserInput {
  age: Int
  ageRange: String
  badgeLevel: String
  bio: String
  city: String
  countryCode: Int
  countryOfOrigin: String
  dateOfBirth: DateTime
  emailVerified: Boolean
  expoPushToken: String
  firstName: String
  gender: String
  invitationStatus: String
  invitedBy: String
  lastName: String

  """
  
           {
             followed: boolean;
             friendPost: boolean;
             friendRequest: boolean;
             votingIsExpired: boolean;
             followingPeoplePost: boolean;
           }
  """
  notificationSettings: JSONObject
  password: String
  phoneNumber: Int
  profilePicture: String
  recoveryEmail: String
  signupType: String
  status: String
  userType: String
}

type UpdateUserReturn {
  message: String!
  user: User!
}

type User {
  age: Int
  ageRange: String
  badgeLevel: String
  bio: String
  city: Int
  countryCode: Int
  countryOfOrigin: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String
  emailVerified: Boolean
  expoPushToken: String
  firstName: String
  followers: [Followers!]
  following: [Followers!]
  friended: [Friends!]
  friends: [Friends!]
  gender: String!
  id: ID
  invitationStatus: String!
  invitedBy: String
  isBanned: Boolean!
  lastName: String
  notificationSettings: NotificationSettingsP
  notifications: [NotificationsP!]
  phoneNumber: Int
  platformId: String
  platformToken: String
  posts: [Posts!]
  profilePicture: String
  recoveryEmail: String
  role: role
  signupType: String
  status: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  userType: String
  username: String
  voted: [Votes!]
}

type UserToUserCUNotResponse {
  message: String
  notification: UserToUserPushNotifications!
}

type UserToUserPushNotifications {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID
  postNotificationsOn: Boolean
  publisher: User
  publisherUserId: String
  subscriber: User
  subscriberUserId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

input VoteInput {
  postId: String!
  voteType: String!
}

type VoteStats {
  CHIC: Int
  COOL: Int
  FIRE: Int
  LEFT: Int
  RIGHT: Int
  SHOCK: Int
  VERYCOOL: Int
  overallVotes: Int
}

type Votes {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID
  post: [Posts!]
  postId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  user: User
  userId: String
  voteType: voteType!
}

type VotesResponse {
  message: String
  voteStats: VoteStats
  votes: Votes
}

"""Friendship status"""
enum friendshipStatus {
  ACCEPTED
  DECLINED
  WAITING
}

"""Notification type"""
enum notificationType {
  FOLLOWED
  FRIENDREQUEST
  USERPOST
  VOTINGEXPIRED
}

enum postType {
  COMPARE
  MAKEOVER
  STANDARD
}

enum role {
  ADMIN
  USER
}

"""Vote type"""
enum voteType {
  CHIC
  COOL
  FIRE
  LEFT
  RIGHT
  SHOCK
  VERYCOOL
}
